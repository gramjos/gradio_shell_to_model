# -*- coding: utf-8 -*-
"""pix2struct_base_run.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oIpFSNp9meH0dK1Y8Zh5wM55X2cLz3b5

!nvidia-smi

!apt-get install -y -qq poppler-utils

!uv pip install git+https://github.com/huggingface/transformers pdf2image poppler-utils

"""

from pdf2image import convert_from_path, convert_from_bytes
import torch
from functools import partial
from PIL import Image
from transformers import Pix2StructForConditionalGeneration as psg
from transformers import Pix2StructProcessor as psp

DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
model = psg.from_pretrained("google/pix2struct-docvqa-large").to(DEVICE)
processor = psp.from_pretrained("google/pix2struct-docvqa-large")

def generate(model, processor, img, questions):
  inputs = processor(images=[img for _ in range(len(questions))],
           text=questions, return_tensors="pt").to(DEVICE)
  predictions = model.generate(**inputs, max_new_tokens=1028)
  return zip(questions, processor.batch_decode(predictions, skip_special_tokens=True))

# def convert_pdf_to_image(filename, page_no):
#     return convert_from_path(filename)[page_no-1]
from pathlib import Path
from io import BytesIO

def convert_to_image(input_source, page_no=1):
    """
    Load a page from a PDF or an image file and return it as a PIL.Image.

    Args:
        input_source (str | bytes | Path):
            - If a str or Path ending in .pdf, treated as a PDF file path.
            - If bytes or a path to an image (.jpg, .png, etc.), treated as an image.
        page_no (int): 1-based page number for PDF (ignored for images).

    Returns:
        PIL.Image.Image: the requested page/image.

    Raises:
        ValueError: if the file type is unsupported or page_no > 1 on image input.
    """
    # If raw bytes, try opening as image first
    if isinstance(input_source, (bytes, bytearray)):
        return Image.open(BytesIO(input_source))

    # Otherwise, work with filesystem path
    path = Path(input_source)
    suffix = path.suffix.lower()

    if suffix == ".pdf":
        pages = convert_from_path(str(path))
        try:
            return pages[page_no - 1]
        except IndexError:
            raise ValueError(f"PDF only has {len(pages)} pages; page_no={page_no} is out of range.")

    # Common image extensions
    elif suffix in {".jpg", ".jpeg", ".png", ".bmp", ".tiff", ".tif", ".webp"}:
        if page_no != 1:
            raise ValueError("page_no > 1 not supported for image files.")
        return Image.open(path)

    else:
        raise ValueError(f"Unsupported file extension '{suffix}'. "
                         "Expected .pdf or an image format.")

questions = ["what is the name of the manufacturer?",
             "What is the Asset Type?",
             "What is the Product Description?",
             "What is Heat Number?",
             "What is Heat Code?"]
# questions= ["what is the name in the top left corner?", "What is the company in the SOLD TO: section?", "What are the comments?", "What is the name of the manufacturer this form is coming from?"]
# questions= ["What is the name of the Technical Services Manager?", "Who is the order shipped to?", "Who is the order sold to?"]

FILENAME = "/content/s1.pdf"

PAGE_NO = 1

image = convert_to_image(FILENAME, PAGE_NO)
print("pdf to image conversion complete.")
generator = partial(generate, model, processor)
completions = generator(image, questions)
for completion in completions:
    print(f"{completion}")

